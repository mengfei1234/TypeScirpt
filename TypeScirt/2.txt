一。TypeScript 基础类型
1.任意类型  any
  声明为 any 的变量可以赋予任意类型的值。
2.数字类型  number
  双精度 64 位浮点值。它可以用来表示整数和分数。
3.字符串类型 string
  一个字符系列，使用单引号（'）或双引号（"）来表示字符串类型。反引号（`）来定义多行文本和内嵌表达式。
4.布尔类型   boolean
  表示逻辑值：true 和 false。
5.数组类型   声明变量为数组。
6.元组       元组类型用来表示已知元素数量和类型的数组，各元素的类型不必相同，对应位置的类型需要相同。
let x: [string, number];
x = ['Runoob', 1];    // 运行正常
x = [1, 'Runoob'];    // 报错
console.log(x[0]);    // 输出 Runoob
7.枚举     enum     枚举类型用于定义数值集合。
8.void     void     用于标识方法返回值的类型，表示该方法没有返回值。
9.null     null     表示对象栀缺失。
10.undefined undefined   用于初始化变量为一个未定义的值。
11.never never           	
never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。
二。Any类型
任意值是 TypeScript 针对编程时类型不明确的变量使用的一种数据类型，它常用于以下三种情况。
1、变量的值会动态改变时，比如来自用户的输入，任意值类型可以让这些变量跳过编译阶段的类型检查，
2.改写现有代码时，任意值允许在编译时可选择地包含或移除类型检查
3.定义存储各种类型数据的数组时
三。Null 和 Undefined
null
    在 JavaScript 中 null 表示 "什么都没有"。

    null是一个只有一个值的特殊类型。表示一个空对象引用。

    用 typeof 检测 null 返回是 object。
Undefined
    在 JavaScript 中, undefined 是一个没有设置值的变量。

    typeof 一个没有值的变量会返回 undefined。


Null 和 Undefined 是其他任何类型（包括 void）的子类型，可以赋值给其它类型，如数字类型，此时，
赋值后的类型会变成 null 或 undefined。而在TypeScript中启用严格的空校验（--strictNullChecks）特性，
就可以使得null 和 undefined 只能被赋值给 void 或本身对应的类型，示例代码如下：
// 启用 --strictNullChecks
let x: number;
x = 1; // 运行正确
x = undefined;    // 运行错误
x = null;    // 运行错误
上面的例子中变量 x 只能是数字类型。如果一个类型可能出现 null 或 undefined， 可以用 | 来支持多种类型，示例代码如下：/////////

// 启用 --strictNullChecks
let x: number | null | undefined;
x = 1; // 运行正确
x = undefined;    // 运行正确
x = null;    // 运行正确
四。never类型
    never 是其它类型（包括 null 和 undefined）的子类型，
    代表从不会出现的值。这意味着声明为 never 类型的变量只能被 never 类型所赋值，
    在函数中它通常表现为抛出异常或无法执行到终止点（例如无限循环）